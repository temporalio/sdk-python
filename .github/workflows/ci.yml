name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - main
      - "releases/*"

jobs:
  # Build and test the project
  build-lint-test:
    strategy:
      fail-fast: false
      matrix:
        python: ["3.8", "3.12"]
        os: [ubuntu-latest, ubuntu-arm, macos-intel, macos-arm, windows-latest]
        include:
          - os: ubuntu-latest
            python: "3.12"
            docsTarget: true
            cloudTestTarget: true
          - os: ubuntu-latest
            python: "3.8"
            protoCheckTarget: true
          - os: ubuntu-arm
            runsOn: ubuntu-24.04-arm64-2-core
          - os: macos-intel
            runsOn: macos-12
          - os: macos-arm
            runsOn: macos-14
        # macOS ARM 3.8 does not have an available Python build at
        # https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json.
        # See https://github.com/actions/setup-python/issues/808 and
        # https://github.com/actions/python-versions/pull/259.
        exclude:
          - os: macos-arm
            python: "3.8"
    runs-on: ${{ matrix.runsOn || matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: temporalio/bridge -> target
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: arduino/setup-protoc@v3
        with:
          # TODO(cretz): Can upgrade proto when https://github.com/arduino/setup-protoc/issues/99 fixed
          version: "23.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      # Using fixed Poetry version until
      # https://github.com/python-poetry/poetry/issues/7611 and
      # https://github.com/python-poetry/poetry/pull/7694 are fixed
      - run: python -m pip install --upgrade wheel "poetry==1.3.2" poethepoet
      - run: poetry install --no-root --all-extras
      - run: poe lint
      - run: poe build-develop
      - run: poe test -s -o log_cli_level=DEBUG --alluredir allure-results-${{ matrix.python }}-${{ matrix.os }}
      - name: "Allure: upload artifact"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          # TODO: handle matrix build structure with allure
          name: allure-results-${{ matrix.python }}-${{ matrix.os }}
          path: allure-results-${{ matrix.python }}-${{ matrix.os }}
          retention-days: 30
      # Time skipping doesn't yet support ARM
      - if: ${{ !endsWith(matrix.os, '-arm') }}
        run: poe test -s -o log_cli_level=DEBUG --workflow-environment time-skipping
      # Check cloud if proper target and not on fork
      - if: ${{ matrix.cloudTestTarget && (github.event.pull_request.head.repo.full_name == '' || github.event.pull_request.head.repo.full_name == 'temporalio/sdk-python') }}
        run: poe test -s -o log_cli_level=DEBUG -k test_cloud_client
        env:
          TEMPORAL_CLIENT_CLOUD_API_KEY: ${{ secrets.TEMPORAL_CLIENT_CLOUD_API_KEY }}
          TEMPORAL_CLIENT_CLOUD_API_VERSION: 2024-05-13-00
          TEMPORAL_CLIENT_CLOUD_NAMESPACE: sdk-ci.a2dd6

      # Confirm protos are already generated properly with older protobuf
      # library and run test with that older version. We must downgrade protobuf
      # so we can generate 3.x and 4.x compatible API. We have to use older
      # Python to run this check because the grpcio-tools version we use
      # is <= 3.10.
      - name: Check generated protos and test protobuf 3.x
        if: ${{ matrix.protoCheckTarget }}
        env:
          TEMPORAL_TEST_PROTO3: 1
        run: |
          poetry add "protobuf<4"
          poe gen-protos
          poe format
          [[ -z $(git status --porcelain temporalio) ]] || (git diff temporalio; echo "Protos changed"; exit 1)
          poe test -s -o log_cli_level=DEBUG

      # Do docs stuff (only on one host)
      - name: Build API docs
        if: ${{ matrix.docsTarget }}
        run: poe gen-docs
      - name: Deploy prod API docs
        if: ${{ github.ref == 'refs/heads/main' && matrix.docsTarget }}
        run: npx vercel deploy build/apidocs -t ${{ secrets.VERCEL_TOKEN }} --name python --scope temporal --prod --yes

      # Confirm README ToC is generated properly
      - uses: actions/setup-node@v4
      - name: Check generated README ToC
        if: ${{ matrix.docsTarget }}
        run: |
          npx doctoc README.md
          [[ -z $(git status --porcelain README.md) ]] || (git diff README.md; echo "README changed"; exit 1)

  # Runs the sdk features repo tests with this repo's current SDK code
  features-tests:
    uses: temporalio/features/.github/workflows/python.yaml@main
    with:
      python-repo-path: ${{github.event.pull_request.head.repo.full_name}}
      version: ${{github.event.pull_request.head.ref}}
      version-is-repo-ref: true
      features-repo-ref: python-update-updates

  # https://allurereport.org/docs/integrations-github/
  # This must be a separate job since it uses container actions that are linux-only.

  create-allure-report:
    name: "Allure: load previous history, create report, and publish"
    needs: build-lint-test
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.8", "3.12"]
        os: [ubuntu-latest, ubuntu-arm, macos-intel, macos-arm, windows-latest]
        exclude:
          - os: macos-arm
            python: "3.8"
    steps:
      - name: "Allure: Download Artifacts"
        uses: actions/download-artifact@v3
        id: download
        with:
          path: allure-results-${{ matrix.python }}-${{ matrix.os }}
          name: allure-results

      - name: "Allure: load test report history"
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: allure-report-data-${{ matrix.python }}-${{ matrix.os }}

      - name: "Allure: build test report"
        uses: simple-elf/allure-report-action@v1.9
        if: always()
        with:
          gh_pages: allure-report-data-${{ matrix.python }}-${{ matrix.os }}
          allure_results: allure-results
          allure_history: allure-history-${{ matrix.python }}-${{ matrix.os }}

      - name: "Allure: publish test report"
        if: always()
        uses: Wandalen/wretry.action@master
        with:
          action: peaceiris/actions-gh-pages@v4
          with: |
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_branch: gh-pages
            publish_dir: allure-history-${{ matrix.python }}-${{ matrix.os }}
