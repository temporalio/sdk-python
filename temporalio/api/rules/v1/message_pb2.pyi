"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
The MIT License

Copyright (c) 2025 Temporal Technologies Inc.  All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import builtins
import collections.abc
import sys

import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class WorkflowRuleAction(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ActionActivityPause(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        def __init__(
            self,
        ) -> None: ...

    ACTIVITY_PAUSE_FIELD_NUMBER: builtins.int
    @property
    def activity_pause(self) -> global___WorkflowRuleAction.ActionActivityPause: ...
    def __init__(
        self,
        *,
        activity_pause: global___WorkflowRuleAction.ActionActivityPause | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "activity_pause", b"activity_pause", "variant", b"variant"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "activity_pause", b"activity_pause", "variant", b"variant"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["variant", b"variant"]
    ) -> typing_extensions.Literal["activity_pause"] | None: ...

global___WorkflowRuleAction = WorkflowRuleAction

class WorkflowRuleSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ActivityStartingTrigger(google.protobuf.message.Message):
        """Activity trigger will be triggered when an activity is about to start."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PREDICATE_FIELD_NUMBER: builtins.int
        predicate: builtins.str
        """Activity predicate is a SQL-like string filter parameter.
        It is used to match against workflow data.
        The following activity attributes are supported as part of the predicate:
        - ActivityType: An Activity Type is the mapping of a name to an Activity Definition..
        - ActivityId: The ID of the activity.
        - ActivityAttempt: The number attempts of the activity.
        - BackoffInterval: The current amount of time between scheduled attempts of the activity.
        - ActivityStatus: The status of the activity. Can be one of "Scheduled", "Started", "Paused".
        - TaskQueue: The name of the task queue the workflow specified that the activity should run on.
        Activity predicate support the following operators:
         * =, !=, >, >=, <, <=
         * AND, OR, ()
         * BETWEEN ... AND
           STARTS_WITH
        """
        def __init__(
            self,
            *,
            predicate: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["predicate", b"predicate"]
        ) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    ACTIVITY_START_FIELD_NUMBER: builtins.int
    VISIBILITY_QUERY_FIELD_NUMBER: builtins.int
    ACTIONS_FIELD_NUMBER: builtins.int
    EXPIRATION_TIME_FIELD_NUMBER: builtins.int
    id: builtins.str
    """The id of the new workflow rule. Must be unique within the namespace.
    Can be set by the user, and can have business meaning.
    """
    @property
    def activity_start(self) -> global___WorkflowRuleSpec.ActivityStartingTrigger: ...
    visibility_query: builtins.str
    """Restricted Visibility query.
    This query is used to filter workflows in this namespace to which this rule should apply.
    It is applied to any running workflow each time a triggering event occurs, before the trigger predicate is evaluated.
    The following workflow attributes are supported:
    - WorkflowType
    - WorkflowId
    - StartTime
    - ExecutionStatus
    """
    @property
    def actions(
        self,
    ) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[
        global___WorkflowRuleAction
    ]:
        """WorkflowRuleAction to be taken when the rule is triggered and predicate is matched."""
    @property
    def expiration_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Expiration time of the rule. After this time, the rule will be deleted.
        Can be empty if the rule should never expire.
        """
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        activity_start: global___WorkflowRuleSpec.ActivityStartingTrigger | None = ...,
        visibility_query: builtins.str = ...,
        actions: collections.abc.Iterable[global___WorkflowRuleAction] | None = ...,
        expiration_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "activity_start",
            b"activity_start",
            "expiration_time",
            b"expiration_time",
            "trigger",
            b"trigger",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "actions",
            b"actions",
            "activity_start",
            b"activity_start",
            "expiration_time",
            b"expiration_time",
            "id",
            b"id",
            "trigger",
            b"trigger",
            "visibility_query",
            b"visibility_query",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["trigger", b"trigger"]
    ) -> typing_extensions.Literal["activity_start"] | None: ...

global___WorkflowRuleSpec = WorkflowRuleSpec

class WorkflowRule(google.protobuf.message.Message):
    """WorkflowRule describes a rule that can be applied to any workflow in this namespace."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CREATE_TIME_FIELD_NUMBER: builtins.int
    SPEC_FIELD_NUMBER: builtins.int
    @property
    def create_time(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Rule creation time."""
    @property
    def spec(self) -> global___WorkflowRuleSpec:
        """Rule specification"""
    def __init__(
        self,
        *,
        create_time: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        spec: global___WorkflowRuleSpec | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "create_time", b"create_time", "spec", b"spec"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "create_time", b"create_time", "spec", b"spec"
        ],
    ) -> None: ...

global___WorkflowRule = WorkflowRule
