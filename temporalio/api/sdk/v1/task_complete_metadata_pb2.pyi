"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
The MIT License

Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class WorkflowTaskCompletedMetadata(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CORE_USED_FLAGS_FIELD_NUMBER: builtins.int
    LANG_USED_FLAGS_FIELD_NUMBER: builtins.int
    @property
    def core_used_flags(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Internal flags used by the core SDK. SDKs using flags must comply with the following behavior:

        During replay:
        * If a flag is not recognized (value is too high or not defined), it must fail the workflow
          task.
        * If a flag is recognized, it is stored in a set of used flags for the run. Code checks for
          that flag during and after this WFT are allowed to assume that the flag is present.
        * If a code check for a flag does not find the flag in the set of used flags, it must take
          the branch corresponding to the absence of that flag.

        During non-replay execution of new WFTs:
        * The SDK is free to use all flags it knows about. It must record any newly-used (IE: not
          previously recorded) flags when completing the WFT.

        SDKs which are too old to even know about this field at all are considered to produce
        undefined behavior if they replay workflows which used this mechanism.

        (-- api-linter: core::0141::forbidden-types=disabled
            aip.dev/not-precedent: These really shouldn't have negative values. --)
        """
    @property
    def lang_used_flags(
        self,
    ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Flags used by the SDK lang. No attempt is made to distinguish between different SDK languages
        here as processing a workflow with a different language than the one which authored it is
        already undefined behavior. See `core_used_patches` for more.

        (-- api-linter: core::0141::forbidden-types=disabled
            aip.dev/not-precedent: These really shouldn't have negative values. --)
        """
    def __init__(
        self,
        *,
        core_used_flags: collections.abc.Iterable[builtins.int] | None = ...,
        lang_used_flags: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "core_used_flags", b"core_used_flags", "lang_used_flags", b"lang_used_flags"
        ],
    ) -> None: ...

global___WorkflowTaskCompletedMetadata = WorkflowTaskCompletedMetadata
